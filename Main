local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()


local Window = Rayfield:CreateWindow({
	Name = "Victor_Heimdal Hub",
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Rayfield",
	LoadingSubtitle = "Credit: Sirius",
	Theme = "AmberGlow", -- Check https://docs.sirius.menu/rayfield/configuration/themes

	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},

	Discord = {
		Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},

	KeySystem = true, -- Set this to true to use our key system
	KeySettings = {
		Title = "This legendary script needs key",
		Subtitle = "GIMME KEYYYY",
		Note = "Ask the owner nicely for the key ", -- Use this to tell the user how to get a key
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"ezE","Victor_Heimdal-IsKing","WsbErBÃ¸sse"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local char = game.Players.LocalPlayer.Character
local hum = char.Humanoid

local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image
local Tab1 = Window:CreateTab("Misc", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Main")

local Slider = Tab:CreateSlider({
	Name = "JumpPower",
	Range = {0, 500},
	Increment = 10,
	Suffix = "JumpPower",
	CurrentValue = 10,
	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		if Value then
			hum.JumpPower = Value
		end
	end
})

local Slider1 = Tab:CreateSlider({
	Name = "WalkSpeed",
	Range = {0, 500},
	Increment = 10,
	Suffix = "WalkSpeed",
	CurrentValue = 10,
	Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		if Value then
			hum.WalkSpeed = Value
		end
	end
})

local Toggle = Tab:CreateToggle({
	Name = "NoClip",
	CurrentValue = false,
	Flag = "Toggle1215", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		if Value == true then
			game:GetService("RunService").RenderStepped:Connect(function()
				game.Players.LocalPlayer.Character.Head.CanCollide = false 
				game.Players.LocalPlayer.Character.Torso.CanCollide = false
			end)
		else
			game:GetService("RunService").RenderStepped:Connect(function()
				game.Players.LocalPlayer.Character.Head.CanCollide = true 
				game.Players.LocalPlayer.Character.Torso.CanCollide = true
			end)
		end
	end
})

local Button = Tab:CreateButton({
	Name = "Force Revome hacks",
	Callback = function()
		Rayfield:Destroy()
	end
})

local Section = Tab1:CreateSection("Chat")

local Input = Tab1:CreateInput({
	Name = "Chat",
	CurrentValue = "",
	PlaceholderText = "Put text here",
	RemoveTextAfterFocusLost = false,
	Flag = "Input231",
	Callback = function(Text)
		local TextChatService = game:GetService("TextChatService")
		TextChatService.TextChannels.RBXGeneral:SendAsync(Text)
	end 
})
local Input2 = Tab1:CreateInput({
	Name = "Kick Player",
	CurrentValue = "",
	PlaceholderText = "Put text here",
	RemoveTextAfterFocusLost = false,
	Flag = "Input231",
	Callback = function(Text)
		game.Players:WaitForChild(Text):Kick("Your a bitch frfr")
	end 
})

local Section = Tab:CreateSection("Health")

local Dropdown = Tab:CreateDropdown({
	Name = "Health function",
	Options = {"Faster Regen","Normal Regen","Risky Regen"},
	CurrentOption = {"Normal Regen"},
	MultipleOptions = false,
	Flag = "yoDropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Options)
		if Options == "Faster Regen" then
			hum.HealthChanged:Connect(function(health)
				if health < hum.MaxHealth then     
					while wait(.3) do
						hum.Health += 5
					end
				end
			end)
		elseif Options == "Risky Regen" then
			hum.HealthChanged:Connect(function(health)
				if health < hum.MaxHealth then
					hum.Health += hum.MaxHealth
				end
			end)
		elseif Options == "Normal Regen" then
			hum.HealthChanged:Connect(function(health)
				if health < hum.MaxHealth then
					while wait(1) do
						hum.Health += 5
					end
				end
			end)
		end
	end
})

local Section4322 = Tab1:CreateSection("AimBot")

local IsAimbotOn = false
local HitPart

local Toggle = Tab1:CreateToggle({
	Name = "AimBot (MB2/RightMouseClick)",
	CurrentValue = false,
	Flag = "Toggle5", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		if Value == true then
			IsAimbotOn = true
			print("True")
			if HitPart == "Torso" then
				local Players = game:GetService("Players")
				local UserInputService = game:GetService("UserInputService")
				local RunService = game:GetService("RunService")

				local localPlayer = Players.LocalPlayer
				local camera = workspace.CurrentCamera

				local isHoldingRightClick = false

				-- Find the nearest player's Head
				local function getNearestPlayerTorso()
					local closestDist = math.huge
					local closestHead = nil

					for _, player in pairs(Players:GetPlayers()) do
						if player ~= localPlayer and player.Character and not player.Character.Humanoid.Health == 0 then
							if not player.Team or player.Team ~= localPlayer.Team then
								local head = player.Character.HumanoidRootPart
								local dist = (head.Position - camera.CFrame.Position).Magnitude
								if dist < closestDist then
									closestDist = dist
									closestHead = head
								end
							end
						end
					end

					return closestHead
				end

				-- Input detection
				UserInputService.InputBegan:Connect(function(input, processed)
					if input.UserInputType == Enum.UserInputType.MouseButton2 then
						isHoldingRightClick = true
					end
				end)

				UserInputService.InputEnded:Connect(function(input, processed)
					if input.UserInputType == Enum.UserInputType.MouseButton2 then
						isHoldingRightClick = false
					end
				end)

				-- Main loop
				RunService.RenderStepped:Connect(function()
					if isHoldingRightClick then
						local targetHead = getNearestPlayerTorso()
						if targetHead then
							local targetPos = targetHead.Position
							local camPos = camera.CFrame.Position
							local newLookVector = (targetPos - camPos).Unit
							camera.CFrame = CFrame.new(camPos, camPos + newLookVector)
						end
					end
				end)
			elseif HitPart == "Head" then
				local Players = game:GetService("Players")
				local UserInputService = game:GetService("UserInputService")
				local RunService = game:GetService("RunService")

				local localPlayer = Players.LocalPlayer
				local camera = workspace.CurrentCamera

				local isHoldingRightClick = false

				-- Find the nearest player's Head
				local function getNearestPlayerHead()
					local closestDist = math.huge
					local closestHead = nil

					for _, player in pairs(Players:GetPlayers()) do
						if player ~= localPlayer and player.Character and not player.Character.Humanoid.Health == 0 then
							if not player.Team or player.Team ~= localPlayer.Team then
								local head = player.Character.Head
								local dist = (head.Position - camera.CFrame.Position).Magnitude
								if dist < closestDist then
									closestDist = dist
									closestHead = head
								end
							end
						end
					end

					return closestHead
				end

				-- Input detection
				UserInputService.InputBegan:Connect(function(input, processed)
					if input.UserInputType == Enum.UserInputType.MouseButton2 then
						isHoldingRightClick = true
					end
				end)

				UserInputService.InputEnded:Connect(function(input, processed)
					if input.UserInputType == Enum.UserInputType.MouseButton2 then
						isHoldingRightClick = false
					end
				end)

				-- Main loop
				RunService.RenderStepped:Connect(function()
					if isHoldingRightClick then
						local targetHead = getNearestPlayerHead()
						if targetHead then
							local targetPos = targetHead.Position
							local camPos = camera.CFrame.Position
							local newLookVector = (targetPos - camPos).Unit
							camera.CFrame = CFrame.new(camPos, camPos + newLookVector)
						end
					end
				end)
			end
		else
			IsAimbotOn = false
			print("False")
			return
		end
	end
})

local Toggle = Tab:CreateToggle({
	Name = "ESP (Highlight Character)",
	CurrentValue = false,
	Flag = "Toggle112341", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		if Value == true then
			for _,v in pairs(game.Players:GetPlayers()) do
				if v.Character and v ~= game.Players.LocalPlayer then
					local highlight = Instance.new("Highlight")
					highlight.Parent = v.Character
					highlight.Enabled = true
					highlight.Name = "ESP"
                    v.Character.Humanoid.Died:Connect(function()
                        local highlight1 = Instance.new("Highlight")
    					highlight1.Parent = v.Character
    					highlight1.Enabled = true
    					highligh1t.Name = "ESP"
                    end)
				end
			end
		elseif Value == false then
			for _,v in pairs(game.Players:GetPlayers()) do
				if v.Character and v ~= game.Players.LocalPlayer then
					if v:FindFirstChild("ESP") then
						v:FindFirstChild("ESP").Enabled = false
					end
				end  
			end
		end
		end
})



local Dropdown1 = Tab1:CreateDropdown({
	Name = "AimBotHitPart",
	Options = {"Head","Torso"},
	CurrentOption = {"Torso"},
	Callback = function(Options)
		if IsAimbotOn == true then
			if Options == "Torso" then
				HitPart = "Torso"
			elseif Options == "Head" then
				HitPart = "Head"
			end
		end
	end
})


Rayfield:LoadConfiguration()
